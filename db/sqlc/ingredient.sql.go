// Code generated by sqlc. DO NOT EDIT.
// source: ingredient.sql

package db

import (
	"context"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO "Ingredient" (
  name, brand_name, description
) VALUES (
  $1, $2, $3
)
RETURNING id, name, brand_name, description, created_at
`

type CreateIngredientParams struct {
	Name        string `json:"name"`
	BrandName   string `json:"brand_name"`
	Description string `json:"description"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.Name, arg.BrandName, arg.Description)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BrandName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM "Ingredient"
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const getAllIngredient = `-- name: GetAllIngredient :many
SELECT id, name, brand_name, description, created_at
FROM "Ingredient"
`

func (q *Queries) GetAllIngredient(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getAllIngredient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingredient{}
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BrandName,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, name, brand_name, description, created_at 
FROM "Ingredient" 
WHERE id = $1
`

func (q *Queries) GetIngredient(ctx context.Context, id int32) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BrandName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE "Ingredient"
SET name = $1, brand_name = $2, description = $3 
WHERE id = $4 
RETURNING id, name, brand_name, description, created_at
`

type UpdateIngredientParams struct {
	Name        string `json:"name"`
	BrandName   string `json:"brand_name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient,
		arg.Name,
		arg.BrandName,
		arg.Description,
		arg.ID,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BrandName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
