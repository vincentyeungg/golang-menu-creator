// Code generated by sqlc. DO NOT EDIT.
// source: menuItem.sql

package db

import (
	"context"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO "MenuItem" (
  name, description, price, status, created_by, updated_by
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, price, created_at, created_by, updated_at, updated_by, status
`

type CreateMenuItemParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int64  `json:"price"`
	Status      string `json:"status"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Status,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM "MenuItem"
WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, id)
	return err
}

const getAllActiveItems = `-- name: GetAllActiveItems :many
SELECT id, name, description, price, created_at, created_by, updated_at, updated_by, status
FROM "MenuItem" 
WHERE status = 'A'
ORDER BY name 
LIMIT $1 
OFFSET $2
`

type GetAllActiveItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllActiveItems(ctx context.Context, arg GetAllActiveItemsParams) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMenuItems = `-- name: GetAllMenuItems :many
SELECT id, name, description, price, created_at, created_by, updated_at, updated_by, status
FROM "MenuItem" 
ORDER BY name 
LIMIT $1 
OFFSET $2
`

type GetAllMenuItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllMenuItems(ctx context.Context, arg GetAllMenuItemsParams) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenuItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuItem = `-- name: GetMenuItem :one
SELECT id, name, description, price, created_at, created_by, updated_at, updated_by, status 
FROM "MenuItem" 
WHERE id = $1 AND status = $2
LIMIT 1
`

type GetMenuItemParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) GetMenuItem(ctx context.Context, arg GetMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItem, arg.ID, arg.Status)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE "MenuItem"
SET name = $1, description = $2, price = $3, updated_at = NOW() 
WHERE id = $4 
RETURNING id, name, description, price, created_at, created_by, updated_at, updated_by, status
`

type UpdateMenuItemParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int64  `json:"price"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItem,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ID,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}
