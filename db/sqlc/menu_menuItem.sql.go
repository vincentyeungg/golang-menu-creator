// Code generated by sqlc. DO NOT EDIT.
// source: menu_menuItem.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAllItemsFromMenu = `-- name: getAllItemsFromMenu :many
SELECT mmi.id, menu_id, food_id, mmi.created_at, mmi.created_by, mmi.updated_at, mmi.updated_by, mmi.status, mi.id, name, description, price, mi.created_at, mi.created_by, mi.updated_at, mi.updated_by, mi.status 
FROM "Menu_MenuItem" AS "mmi"
JOIN "MenuItem" AS "mi" ON "mmi".food_id = "mi".id
WHERE menu_id = $1 
LIMIT $2 
OFFSET $3
`

type getAllItemsFromMenuParams struct {
	MenuID int32 `json:"menu_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type getAllItemsFromMenuRow struct {
	ID          int32          `json:"id"`
	MenuID      int32          `json:"menu_id"`
	FoodID      int32          `json:"food_id"`
	CreatedAt   time.Time      `json:"created_at"`
	CreatedBy   string         `json:"created_by"`
	UpdatedAt   time.Time      `json:"updated_at"`
	UpdatedBy   string         `json:"updated_by"`
	Status      sql.NullString `json:"status"`
	ID_2        int32          `json:"id_2"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Price       string         `json:"price"`
	CreatedAt_2 time.Time      `json:"created_at_2"`
	CreatedBy_2 string         `json:"created_by_2"`
	UpdatedAt_2 time.Time      `json:"updated_at_2"`
	UpdatedBy_2 string         `json:"updated_by_2"`
	Status_2    sql.NullString `json:"status_2"`
}

func (q *Queries) getAllItemsFromMenu(ctx context.Context, arg getAllItemsFromMenuParams) ([]getAllItemsFromMenuRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllItemsFromMenu, arg.MenuID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []getAllItemsFromMenuRow{}
	for rows.Next() {
		var i getAllItemsFromMenuRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.FoodID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Status,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedAt_2,
			&i.UpdatedBy_2,
			&i.Status_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
