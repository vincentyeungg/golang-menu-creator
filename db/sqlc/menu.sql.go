// Code generated by sqlc. DO NOT EDIT.
// source: menu.sql

package db

import (
	"context"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO "Menu" (
  name, description
) VALUES (
  $1, $2
)
RETURNING id, name, description, created_at
`

type CreateMenuParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, createMenu, arg.Name, arg.Description)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM "Menu"
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const getAllMenus = `-- name: GetAllMenus :many
SELECT id, name, description, created_at
FROM "Menu"
`

func (q *Queries) GetAllMenus(ctx context.Context) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Menu{}
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenu = `-- name: GetMenu :one
SELECT id, name, description, created_at 
FROM "Menu" 
WHERE id = $1
`

func (q *Queries) GetMenu(ctx context.Context, id int32) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenu, id)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE "Menu"
SET name = $1, description = $2
WHERE id = $3 
RETURNING id, name, description, created_at
`

type UpdateMenuParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenu, arg.Name, arg.Description, arg.ID)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
